define(["angular","sockjs-client"],function(e,n){"use strict";e.module("angular-sockjs",[]).provider("$socket",function(){function r(n){return e.fromJson(n)}function t(n,r){return e.toJson([n,r])}function o(e,o,s){var a=this;return a.socket=null,a.multiplexer=null,a.channels=[],a.queue=[],a.registredChannels=[],a.interval=null,a.on=function(n,r,t){return(t||e).$on(c.broadcastPrefix+n,r)},a.send=function(e,n,r){var o=a.getChannel(e),s=(c.formatter||t)(n,r);return o?(a.queue[o.name].push(s),a.sendChannelQueueMessages(o)):!1},a.initSocket=function(e){return a.socket=null,e&&(c.address=e),n?c.address?(a.socket=new n(c.address),s.info("Connecting to "+c.address),a.socket.onclose=function(){a.socket=null},void(a.interval=o(function(){a.checkSocket()},c.reconnectInterval))):s.error(new Error("Must configure the address")):s.error(new Error("Must include SockJS for angular-sockjs to work"))},a.initChannel=function(n){if(!a.socket)return s.error(new Error("Socket must be started before channel, see start() method"));if(!n)return s.error(new Error("Channel must be defined"));if(!WebSocketMultiplex)return s.error(new Error("Must include WebSocketMultiplex for channels to work"));a.multiplexer||(a.multiplexer=new WebSocketMultiplex(a.socket)),s.info('Initializing "'+n.name+'" channel');var t=a.multiplexer.channel(n.name);t.connected=!1,a.queue[t.name]||(a.queue[t.name]=[]),a.registredChannels[t.name]||(a.registredChannels[t.name]=n),t.onopen=function(){t.connected=!0,e.$broadcast(c.broadcastPrefix+t.name+".open")},t.onmessage=function(n){return n=(c.parser||r)(n.data),Array.isArray(n)&&2===n.length?(n[1].success||e.$broadcast(c.broadcastPrefix+t.name+".error",n),void e.$broadcast(c.broadcastPrefix+t.name+"."+n[0],n[1])):s.error(new Error("Invalid message "+n.toString()))},t.onclose=function(){t.connected=!1,e.$broadcast(c.broadcastPrefix+t.name+".close")},a.channels.push(t)},a.closeSocket=function(){a.socket&&(a.channels.splice(0),a.socket.close(),a.socket=null)},a.checkSocket=function(){if(!a.socket||3===a.socket.readyState){o.cancel(a.interval),a.socket=null,a.channels.forEach(function(n){e.$broadcast(c.broadcastPrefix+n.name+".close")}),a.channels.splice(0),a.initSocket(c.address);for(var n in a.registredChannels)a.initChannel(a.registredChannels[n])}},a.getChannel=function(e){if(!a.socket)return s.error(new Error("Socket connection not initialized"));if(!a.channels)return s.error(new Error("No channel found"));var n=null;return a.channels.some(function(r){return r.name===e?(n=r,!0):!1}),n||a.channels[0]},a.sendChannelQueueMessages=function(e){return e&&e.connected&&a.queue[e.name].length?(a.queue[e.name].forEach(function(n,r){delete a.queue[e.name][r],e.send(n)}),a.queue[e.name].splice(0),!0):!1},{start:a.initSocket,stop:a.closeSocket,initChannel:a.initChannel,send:a.send,on:a.on,socket:function(){return a.socket}}}o.$inject=["$rootScope","$interval","$log"];var c={address:null,broadcastPrefix:"$socket.",reconnectInterval:3e3,parser:null,formatter:null};this.$get=o,this.configure=function(n){e.extend(c,n)}})});
//# sourceMappingURL=angular-sockjs.min.js.map
