define(["angular","sockjs-client"],function(e,n){"use strict";e.module("angular-sockjs",[]).provider("$socket",function(){function r(n){return e.fromJson(n)}function t(n,r){return e.toJson([n,r])}function o(e,o,a){function u(n,r,t){return(t||e).$on(c.broadcastPrefix+n,r)}function s(e,n,r){var o=d.getChannel(e),a=(c.formatter||t)(n,r);return d.queue[o.name].push(a),d.sendChannelQueues(o)}function l(e){return d.socket=null,e&&(c.address=e),n?c.address?(d.socket=new n(c.address),a.info("Connecting to "+c.address),void(d.interval=o(function(){d.checkSocket(e)},c.reconnectInterval))):a.error(new Error("Must configure the address")):a.error(new Error("Must include SockJS for angular-sockjs to work"))}function i(n){if(!d.socket)return a.error(new Error("Socket must be started before channel, see start() method"));if(!n)return a.error(new Error("Channel must be defined"));if(!WebSocketMultiplex)return a.error(new Error("Must include WebSocketMultiplex for channels to work"));d.multiplexer||(d.multiplexer=new WebSocketMultiplex(d.socket)),a.info('Initializing "'+n.name+'" channel');var t=d.multiplexer.channel(n.name);t.connected=!1,d.queue[t.name]||(d.queue[t.name]=[]),t.onopen=function(){e.$broadcast(c.broadcastPrefix+t.name+".open"),t.connected=!0},t.onmessage=function(n){return n=(c.parser||r)(n.data),Array.isArray(n)&&2===n.length?(n[1].success||e.$broadcast(c.broadcastPrefix+t.name+".error",n),void e.$broadcast(c.broadcastPrefix+t.name+"."+n[0],n[1])):a.error(new Error("Invalid message "+n.toString()))},t.onclose=function(){e.$broadcast(c.broadcastPrefix+t.name+".close"),d.socket=null,t.connected=!1},d.channels.push(t)}var d=this;return d.socket=null,d.multiplexer=null,d.channels=[],d.queue=[],d.interval=null,d.checkSocket=function(n){d.socket&&3!==d.socket.readyState||(d.socket=null,o.cancel(d.interval),d.channels.forEach(function(n){e.$broadcast(c.broadcastPrefix+n.name+".close")}),l(n))},d.getChannel=function(e){if(!d.socket||!d.channels)return a.error(new Error("No channel found !"));var n=null;return d.channels.some(function(r){return r.name===e?(n=r,!0):!1}),n||d.channels[0]},d.sendChannelQueues=function(e){return e&&e.connected&&d.queue[e.name].length?(d.queue[e.name].forEach(function(n){delete d.queue[e.name][n],e.send(n)}),d.queue[e.name].splice(0),!0):!1},{start:l,initChannel:i,send:s,on:u,socket:function(){return socket}}}o.$inject=["$rootScope","$interval","$log"];var c={address:null,broadcastPrefix:"$socket.",reconnectInterval:3e3,parser:null,formatter:null};this.$get=o,this.configure=function(n){e.extend(c,n)}})});
//# sourceMappingURL=angular-sockjs.min.js.map
